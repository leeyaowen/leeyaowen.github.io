<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>在NexT中增加canvas nest特效</title>
    <url>/2021/02/10/20210210-add-canvas-nest/</url>
    <content><![CDATA[<p>剛開始使用Hexo<br>想增加幾何線條的特效，滑鼠移動過去時會吸引線條<br>方法是在<code>themes/next/layout/_layout.swig</code>中的<code>&lt;body&gt;</code>區塊增加以下code</p>
<figure class="highlight html"><figcaption><span>HTML</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">color</span>=<span class="string">&quot;0,0,0&quot;</span> <span class="attr">opacity</span>=<span class="string">&#x27;0.5&#x27;</span> <span class="attr">zIndex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">count</span>=<span class="string">&quot;99&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>code</tag>
      </tags>
  </entry>
  <entry>
    <title>準備踏入股票市場</title>
    <url>/2021/02/10/20210210-stock/</url>
    <content><![CDATA[<p>上週申請了一個新的銀行戶頭，也申請了證券戶頭<br>經過10個工作天後總算申請通過了<br>使用的是玉山富果帳戶<br>原因是我覺得資料呈現的蠻不錯的<br>接下來就等年後再看看什麼時候要正式入場啦<br><img src="https://photos.smugmug.com/photos/i-78Rh8qh/0/14ca9d27/XL/i-78Rh8qh-XL.png"></p>
]]></content>
      <categories>
        <category>stock</category>
      </categories>
      <tags>
        <tag>stock</tag>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>Bronica S2A + Nikkor-p 75mm F/2.8實拍</title>
    <url>/2021/02/11/20210211-S2A-75-sample/</url>
    <content><![CDATA[<p>Fuji 400H<br><img src="https://photos.smugmug.com/photos/i-94S6rJK/0/fcf6aa14/X3/i-94S6rJK-X3.jpg"></p>
<a id="more"></a>
<p>Fuji 400H<br><img src="https://photos.smugmug.com/photos/i-qn9CTM2/0/9e0d2fe4/X3/i-qn9CTM2-X3.jpg"><br>Fuji 400H<br><img src="https://photos.smugmug.com/photos/i-kFhhHmG/0/da3345b5/X3/i-kFhhHmG-X3.jpg"><br>Fuji 160NS<br><img src="https://photos.smugmug.com/photos/i-jjjCvxj/0/5450fa45/X3/i-jjjCvxj-X3.jpg"><br>Fuji 160NS<br><img src="https://photos.smugmug.com/photos/i-R5gZhJj/0/bfa9213d/X3/i-R5gZhJj-X3.jpg"><br>Fuji 160NS<br><img src="https://photos.smugmug.com/photos/i-7cQfqLf/0/a7eb03b4/X3/i-7cQfqLf-X3.jpg"><br>Fuji 160NS<br><img src="https://photos.smugmug.com/photos/i-hWvHvHs/0/e4faf719/X3/i-hWvHvHs-X3.jpg"><br>Kodak Portra 400<br><img src="https://photos.smugmug.com/photos/i-LNVJ8T9/0/44b4f220/X3/i-LNVJ8T9-X3.jpg"><br>Kodak Portra 400<br><img src="https://photos.smugmug.com/photos/i-hv2VfRC/0/aea0fb80/X3/i-hv2VfRC-X3.jpg"><br>Kodak Portra 400<br><img src="https://photos.smugmug.com/photos/i-WrjdcbC/0/df9fcaae/X3/i-WrjdcbC-X3.jpg"><br>Kodak Portra 400<br><img src="https://photos.smugmug.com/photos/i-sS8BtnD/0/ec5c9cf2/X3/i-sS8BtnD-X3.jpg"><br>Kodak Portra 400<br><img src="https://photos.smugmug.com/photos/i-V8sXTBg/0/d6d97473/X3/i-V8sXTBg-X3.jpg"></p>
]]></content>
      <categories>
        <category>photography</category>
      </categories>
      <tags>
        <tag>photography</tag>
        <tag>film</tag>
        <tag>bronica s2a</tag>
        <tag>nikkor 75mm</tag>
      </tags>
  </entry>
  <entry>
    <title>[PhotoVogue]No. 288</title>
    <url>/2022/01/24/20220124-photovogue/</url>
    <content><![CDATA[<p><img src="https://photos.smugmug.com/PhotoVogue/PhotoVogueGoogle/i-QnvVPm7/0/42dbac6f/X3/288-X3.jpg"></p>
<a id="more"></a>
<p>今天被Vogue認證了第288張<br>是用Bronica S2A + Fuji 160NS</p>
<p>現行的制度是這樣↓<br>每週一羅馬時間上午8點到晚上8點可投稿2張(免費)，受認證即上浮水印並加入你的作品集，反之就刪除照片<br>有興趣可以投投看</p>
]]></content>
      <categories>
        <category>photography</category>
      </categories>
      <tags>
        <tag>photography</tag>
        <tag>film</tag>
        <tag>bronica s2a</tag>
        <tag>photovogue</tag>
        <tag>vogue</tag>
      </tags>
  </entry>
  <entry>
    <title>[R]以R語言繪製氣象站的各月雨量資料(2022年1月版)</title>
    <url>/2022/01/23/20220123-r-cwb-data-visualization/</url>
    <content><![CDATA[<p>首先要到氣象局的<a href="https://e-service.cwb.gov.tw/HistoryDataQuery/index.jsp">觀測資料查詢</a>，這邊以屏東縣檳榔測站為例<br><img src="https://photos.smugmug.com/photos/i-WvxbsNb/0/772157cc/XL/i-WvxbsNb-XL.png"></p>
<a id="more"></a>
<p>選擇月報表後可以看到以下資料，點擊下載csv檔可以獲得該月資料<br><img src="https://photos.smugmug.com/photos/i-wZJPz2X/0/66c8270f/XL/i-wZJPz2X-XL.png"><br>這邊以收集2021年資料為例，將其整理至一資料夾，如下圖<br><img src="https://photos.smugmug.com/photos/i-LzkqMhQ/0/0f3f4c60/O/i-LzkqMhQ.png"></p>
<p>之後以R繪製雨量資料</p>
<figure class="highlight r"><figcaption><span>R</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">####load packages####</span></span><br><span class="line">library(dplyr)</span><br><span class="line">library(magrittr)</span><br><span class="line">library(ggplot2)</span><br><span class="line">library(stringr)</span><br><span class="line"></span><br><span class="line"><span class="comment">####bind data####</span></span><br><span class="line">filenames&lt;-list.files(<span class="string">&quot;./Binlang&quot;</span>,pattern = <span class="string">&quot;.csv&quot;</span>)</span><br><span class="line">precpdf&lt;-read.csv(paste0(<span class="string">&quot;./Binlang/&quot;</span>,filenames[<span class="number">1</span>]),skip = <span class="number">1</span>,colClasses = <span class="string">&quot;character&quot;</span>) %&gt;%</span><br><span class="line">  mutate(month=str_sub(filenames[<span class="number">1</span>],-<span class="number">6</span>,-<span class="number">5</span>))</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">2</span>:<span class="built_in">length</span>(filenames)) &#123;</span><br><span class="line">  dttemp&lt;-read.csv(paste0(<span class="string">&quot;./Binlang/&quot;</span>,filenames[i]),skip = <span class="number">1</span>,colClasses = <span class="string">&quot;character&quot;</span>) %&gt;%</span><br><span class="line">    mutate(month=str_sub(filenames[i],-<span class="number">6</span>,-<span class="number">5</span>))</span><br><span class="line">  precpdf&lt;-bind_rows(precpdf,dttemp)</span><br><span class="line">&#125;</span><br><span class="line">precpdf$Precp&lt;-<span class="built_in">as.numeric</span>(precpdf$Precp)</span><br><span class="line">precpdf&lt;-precpdf %&gt;%</span><br><span class="line">  group_by(month) %&gt;%</span><br><span class="line">  summarise(precp=<span class="built_in">sum</span>(Precp,na.rm = <span class="built_in">T</span>)) %&gt;%</span><br><span class="line">  ungroup()</span><br><span class="line"></span><br><span class="line"><span class="comment">####plot####</span></span><br><span class="line">p&lt;-ggplot(data = precpdf,aes(x=month,y=precp))+</span><br><span class="line">  geom_bar(stat = <span class="string">&quot;identity&quot;</span>)+</span><br><span class="line">  labs(title = <span class="string">&quot;Binlang&quot;</span>)+</span><br><span class="line">  geom_text(aes(y=precp,label=precp),vjust=-<span class="number">0.5</span>)+</span><br><span class="line">  theme_classic()+</span><br><span class="line">  theme(plot.title = element_text(hjust = <span class="number">0.5</span>))+</span><br><span class="line">  scale_y_continuous(limits = <span class="built_in">c</span>(<span class="number">0</span>,<span class="number">850</span>))</span><br><span class="line">p</span><br><span class="line">ggsave(filename = <span class="string">&quot;Binlang_2021_precp.png&quot;</span>,width = <span class="number">15</span>,height = <span class="number">10</span>,units = <span class="string">&quot;cm&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://photos.smugmug.com/photos/i-6KH9vX8/0/fe20c42a/XL/i-6KH9vX8-XL.png"></p>
]]></content>
      <categories>
        <category>R</category>
      </categories>
      <tags>
        <tag>code</tag>
        <tag>R</tag>
        <tag>coding</tag>
        <tag>cwb</tag>
        <tag>data visualization</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
  <entry>
    <title>[PhotoVogue]No. 289</title>
    <url>/2022/02/02/20220202-photovogue/</url>
    <content><![CDATA[<p><img src="https://photos.smugmug.com/PhotoVogue/PhotoVogueGoogle/i-K623rkg/0/cdaf3790/X3/289-X3.jpg"></p>
<a id="more"></a>
<p>週一被Vogue認證了第289張<br>這張最特殊的點在於用來拍照的app是我開發的</p>
]]></content>
      <categories>
        <category>photography</category>
      </categories>
      <tags>
        <tag>photography</tag>
        <tag>photovogue</tag>
        <tag>vogue</tag>
        <tag>pixel 4a 5g</tag>
      </tags>
  </entry>
  <entry>
    <title>[python]利用flickrapi爬取Flickr的圖片</title>
    <url>/2022/02/03/20220203-flickr-crawler/</url>
    <content><![CDATA[<p><img src="https://photos.smugmug.com/photos/i-MMLCBKw/0/f2255d5d/X2/i-MMLCBKw-X2.png"><br>Flickr是世界數一數二大的圖片資料庫，雖然經過幾次轉手，經歷付費政策的風波，其仍具相當的價值<br>flickrapi可以幫助我們快速收集圖片資料，探索Flickr<br>這邊使用的python環境為3.7<br>使用<code>pip install flickrapi</code>是安裝flickrapi的好的開始</p>
<a id="more"></a>
<p>在使用flickrapi前記得去申請一組key跟secret方便後續使用</p>
<p>以下就是code的部分</p>
<figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> flickrapi</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlretrieve</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 這邊打自己的key跟secret，不要傻傻複製貼上，跑不動阿!!!</span></span><br><span class="line">flickr = flickrapi.FlickrAPI(api_key=KEY,</span><br><span class="line">                             secret=SECRET,</span><br><span class="line">                             cache=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 這邊打要搜尋的關鍵字</span></span><br><span class="line">searchword = <span class="string">&#x27;office ceiling&#x27;</span></span><br><span class="line"><span class="comment"># 這邊放搜尋張數上限</span></span><br><span class="line">limitnum = <span class="number">500</span></span><br><span class="line"></span><br><span class="line">os.makedirs(<span class="string">&#x27;./picture/%s&#x27;</span> % searchword, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">photos = flickr.walk(text=searchword,</span><br><span class="line">                     extras=<span class="string">&#x27;url_c&#x27;</span>,</span><br><span class="line">                     per_page=<span class="number">200</span>,</span><br><span class="line">                     sort=<span class="string">&#x27;relevance&#x27;</span>)</span><br><span class="line">urls = <span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">for</span> i, photo <span class="keyword">in</span> <span class="built_in">enumerate</span>(photos):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = photo.get(<span class="string">&#x27;url_c&#x27;</span>)</span><br><span class="line">        urls.append(url)</span><br><span class="line">        urlretrieve(urls[i], <span class="string">&#x27;./picture/%s/%s-%s.jpg&#x27;</span> % (searchword, searchword, <span class="built_in">str</span>(i)))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i&gt;limitnum-<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>使用自行注意著作權問題喔~</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>code</tag>
        <tag>coding</tag>
        <tag>python</tag>
        <tag>flickrapi</tag>
        <tag>web crawler</tag>
        <tag>網路爬蟲</tag>
      </tags>
  </entry>
  <entry>
    <title>[PhotoVogue]No. 290/No. 291</title>
    <url>/2022/02/28/20220221-photovogue/</url>
    <content><![CDATA[<p>2022.02.21，久違的兩張都上<br><img src="https://photos.smugmug.com/PhotoVogue/PhotoVogueGoogle/i-Xf584nV/0/0cfddd88/X3/290-X3.jpg"><br><img src="https://photos.smugmug.com/PhotoVogue/PhotoVogueGoogle/i-vhkZCQ4/0/d37aea6e/X3/291-X3.jpg"></p>
]]></content>
      <categories>
        <category>photography</category>
      </categories>
      <tags>
        <tag>photography</tag>
        <tag>photovogue</tag>
        <tag>vogue</tag>
        <tag>canon</tag>
        <tag>tamron 35mm f/1.8</tag>
      </tags>
  </entry>
  <entry>
    <title>[python]在必須縮圖至特定長寬條件下維持圖片長寬比並保留最多圖片資訊的方法</title>
    <url>/2022/03/19/20220319-img-resize/</url>
    <content><![CDATA[<p>在圖片要給AI模型時常常需要不同的圖片大小，縮圖即是其中一門學問<br>這邊以寬640，高480為例<br>若圖片直接scale到這個大小多有變形問題<br>尤其直幅圖片影響非常大<br>這裡提供想法解決這個問題</p>
<a id="more"></a>
<p>如原始圖片為直幅<br><img src="https://photos.smugmug.com/photos/i-gcXwKGT/0/e869363e/X5/i-gcXwKGT-X5.jpg"><br>經python轉換後為640x480維持比例加灰邊至640x480大小<br><img src="https://photos.smugmug.com/photos/i-LLXFGxS/0/3d02a738/O/i-LLXFGxS.jpg"><br>那以下為轉換的code</p>
<figure class="highlight python"><figcaption><span>python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tf_w = <span class="number">640</span></span><br><span class="line">tf_h = <span class="number">480</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">img_resize</span>(<span class="params">img_name</span>):</span></span><br><span class="line">    img = cv2.imdecode(np.fromfile(img_name, dtype=np.uint8), -<span class="number">1</span>)</span><br><span class="line">    w = img.shape[<span class="number">1</span>]</span><br><span class="line">    h = img.shape[<span class="number">0</span>]</span><br><span class="line">    ratio = h / w</span><br><span class="line">    target_ratio = tf_h / tf_w</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">max</span>(img.shape[:<span class="number">2</span>]) &gt; tf_w:</span><br><span class="line">        interp = cv2.INTER_AREA</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        interp = cv2.INTER_LINEAR</span><br><span class="line"></span><br><span class="line">    img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> img.shape[:<span class="number">2</span>] == (tf_w, tf_h):</span><br><span class="line">        img_rgb_border = img</span><br><span class="line">    <span class="keyword">elif</span> ratio == target_ratio:</span><br><span class="line">        img_rgb_border = cv2.resize(img_rgb, (tf_w, <span class="built_in">int</span>(tf_w * ratio)), interpolation=interp)</span><br><span class="line">    <span class="keyword">elif</span> (w &gt; h) &amp; (ratio &gt; target_ratio):</span><br><span class="line">        img_rgb = cv2.resize(img_rgb, (<span class="built_in">int</span>(tf_h * ratio), tf_h), interpolation=interp)</span><br><span class="line">        img_rgb_border = cv2.copyMakeBorder(img_rgb, top=<span class="number">0</span>, bottom=<span class="number">0</span>, left=<span class="number">0</span>, right=tf_w - img_rgb.shape[<span class="number">1</span>],</span><br><span class="line">                                            borderType=cv2.BORDER_CONSTANT,</span><br><span class="line">                                            value=[<span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>])</span><br><span class="line">    <span class="keyword">elif</span> w &gt; h:</span><br><span class="line">        img_rgb = cv2.resize(img_rgb, (tf_w, <span class="built_in">int</span>(tf_w * ratio)), interpolation=interp)</span><br><span class="line">        img_rgb_border = cv2.copyMakeBorder(img_rgb, top=<span class="number">0</span>, bottom=tf_h - img_rgb.shape[<span class="number">0</span>], left=<span class="number">0</span>, right=<span class="number">0</span>,</span><br><span class="line">                                            borderType=cv2.BORDER_CONSTANT,</span><br><span class="line">                                            value=[<span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>])</span><br><span class="line">    <span class="keyword">elif</span> (w &lt;= h) &amp; (ratio &gt; target_ratio) &amp; (ratio &lt;= <span class="number">1</span>):</span><br><span class="line">        img_rgb = cv2.resize(img_rgb, (<span class="built_in">int</span>(tf_h * ratio), tf_h), interpolation=interp)</span><br><span class="line">        img_rgb_border = cv2.copyMakeBorder(img_rgb, top=<span class="number">0</span>, bottom=<span class="number">0</span>, left=<span class="number">0</span>, right=tf_w - img_rgb.shape[<span class="number">1</span>],</span><br><span class="line">                                            borderType=cv2.BORDER_CONSTANT,</span><br><span class="line">                                            value=[<span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>])</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">int</span>(tf_h * ratio) &lt; tf_w:</span><br><span class="line">        img_rgb = cv2.rotate(img_rgb, cv2.ROTATE_90_CLOCKWISE)</span><br><span class="line">        img_rgb = cv2.resize(img_rgb, (<span class="built_in">int</span>(tf_h * ratio), tf_h), interpolation=interp)</span><br><span class="line">        img_rgb_border = cv2.copyMakeBorder(img_rgb, top=<span class="number">0</span>, bottom=<span class="number">0</span>, left=<span class="number">0</span>,</span><br><span class="line">                                            right=tf_w - img_rgb.shape[<span class="number">1</span>],</span><br><span class="line">                                            borderType=cv2.BORDER_CONSTANT,</span><br><span class="line">                                            value=[<span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        img_rgb = cv2.rotate(img_rgb, cv2.ROTATE_90_CLOCKWISE)</span><br><span class="line">        img_rgb = cv2.resize(img_rgb, (tf_w, <span class="built_in">int</span>(tf_w / ratio)), interpolation=interp)</span><br><span class="line">        img_rgb_border = cv2.copyMakeBorder(img_rgb, top=<span class="number">0</span>, bottom=tf_h - img_rgb.shape[<span class="number">0</span>], left=<span class="number">0</span>, right=<span class="number">0</span>,</span><br><span class="line">                                            borderType=cv2.BORDER_CONSTANT,</span><br><span class="line">                                            value=[<span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>])</span><br><span class="line"></span><br><span class="line">    os.makedirs(<span class="string">&#x27;./border&#x27;</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">    cv2.imencode(<span class="string">&#x27;.jpg&#x27;</span>,</span><br><span class="line">                 cv2.cvtColor(img_rgb_border,</span><br><span class="line">                              cv2.COLOR_RGB2BGR))[<span class="number">1</span>].tofile(<span class="string">&#x27;./border/%s-border.jpg&#x27;</span> % os.path.basename(img_name)[:-<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    filepath = <span class="built_in">input</span>(<span class="string">&#x27;filepath=?\n&#x27;</span>)</span><br><span class="line">    img_resize(filepath)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>code</tag>
        <tag>coding</tag>
        <tag>python</tag>
        <tag>opencv</tag>
        <tag>numpy</tag>
        <tag>resize</tag>
      </tags>
  </entry>
  <entry>
    <title>[R]去除字串的多餘空白-從gdata到stringr</title>
    <url>/2022/02/11/20220211-gdata-to-stringr/</url>
    <content><![CDATA[<p>以前處理資料時，因為都是一些人工輸入的資料，難免有瑕疵，<strong>多餘的空白</strong>是會造成資料處理上的麻煩之一</p>
<p>如<code>&#39;abc&#39;</code>與<code>&#39;abc &#39;</code>是完全不同的字串，若用distinct檢查，那結果會是2個，我們可以用生物的學名來做想像，如果多了一個空格，資料等於<strong>多了一個物種</strong><br>先前看到gdata有<code>trim</code>這個function就直接拿來對整個dataframe使用，但其是不認方向的，前後都會去除<br>使用stringr的<code>str_trim</code>則不同，有both, left, right三個選擇</p>
<p>gdata是一個有蠻多處理資料function的package，但其最後更新為2017年<br>stringr主要就是專門做字串處理，且為tidyverse之下的一員，針對字串處理的function豐富，也比較不用擔心沒人維護</p>
<p>考量我也沒有在用gdata的其他功能，以及stringr有更多方便處理字串的function，就跳槽啦!</p>
]]></content>
      <categories>
        <category>R</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>coding</tag>
        <tag>stringr</tag>
        <tag>資料處理</tag>
        <tag>去除空白</tag>
      </tags>
  </entry>
</search>
